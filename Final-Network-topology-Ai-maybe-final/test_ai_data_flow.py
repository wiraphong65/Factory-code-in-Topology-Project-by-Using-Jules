#!/usr/bin/env python3
"""
Test AI Data Flow - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÉ‡∏´‡πâ AI
"""

import requests
import json

BASE_URL = "http://localhost:8000"

def test_ai_data_flow():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡πÉ‡∏´‡πâ AI"""
    print("üîç Testing AI Data Flow...")
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‡∏à‡∏£‡∏¥‡∏á)
    sample_data = {
        "nodes": [
            {
                "id": "node_1",
                "type": "router",
                "data": {
                    "label": "Router 1",
                    "type": "router",
                    "maxThroughput": "1 Gbps",
                    "throughputUnit": "Gbps"
                },
                "position": {"x": 100, "y": 100}
            },
            {
                "id": "node_2",
                "type": "switch", 
                "data": {
                    "label": "Switch 1",
                    "type": "switch",
                    "bandwidth": "100 Mbps",
                    "bandwidthUnit": "Mbps"
                },
                "position": {"x": 300, "y": 100}
            },
            {
                "id": "node_3",
                "type": "pc",
                "data": {
                    "label": "PC 1",
                    "type": "pc",
                    "deviceRole": "Workstation"
                },
                "position": {"x": 500, "y": 100}
            }
        ],
        "edges": [
            {
                "id": "edge_1",
                "source": "node_1",
                "target": "node_2",
                "type": "default",
                "data": {
                    "label": "Connection 1",
                    "bandwidth": "1 Gbps"
                }
            },
            {
                "id": "edge_2", 
                "source": "node_2",
                "target": "node_3",
                "type": "default",
                "data": {
                    "label": "Connection 2",
                    "bandwidth": "100 Mbps"
                }
            }
        ],
        "question": "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"
    }
    
    print("\nüìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÉ‡∏´‡πâ AI:")
    print("=" * 60)
    print(json.dumps(sample_data, ensure_ascii=False, indent=2))
    print("=" * 60)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á AI endpoint
    try:
        # Register ‡πÅ‡∏•‡∏∞ login ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ token
        register_data = {
            "email": "test_data@example.com",
            "username": "testdatauser",
            "password": "testpassword123"
        }
        
        response = requests.post(
            f"{BASE_URL}/auth/register",
            json=register_data,
            headers={"Content-Type": "application/json"}
        )
        
        login_data = {
            "username": "test_data@example.com",
            "password": "testpassword123"
        }
        
        response = requests.post(
            f"{BASE_URL}/auth/token",
            json=login_data,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code != 200:
            print("‚ùå Login failed")
            return
        
        token = response.json()["access_token"]
        
        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á AI endpoint
        print("\nüöÄ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á AI endpoint...")
        response = requests.post(
            f"{BASE_URL}/ai/analyze",
            json=sample_data,
            headers={
                "Content-Type": "application/json",
                "Authorization": f"Bearer {token}"
            }
        )
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("\n‚úÖ AI Response:")
            print("=" * 60)
            print(result["analysis"])
            print("=" * 60)
        else:
            print(f"‚ùå AI Analysis failed: {response.text}")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

def show_prompt_structure():
    """‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÉ‡∏´‡πâ AI"""
    print("\nüìù ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÉ‡∏´‡πâ AI:")
    print("=" * 60)
    
    prompt_structure = {
        "system_prompt": "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå",
        "user_question": "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á",
        "network_data": {
            "analysis": {
                "device_count": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
                "connection_count": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠", 
                "device_types": "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
                "potential_issues": "‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô",
                "recommendations": "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"
            },
            "nodes": "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ nodes ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
            "edges": "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ edges ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
        }
    }
    
    print(json.dumps(prompt_structure, ensure_ascii=False, indent=2))
    print("=" * 60)

def main():
    """Main function"""
    print("üöÄ Testing AI Data Flow and Prompt Structure")
    print("=" * 60)
    
    show_prompt_structure()
    test_ai_data_flow()
    
    print("\n" + "=" * 60)
    print("üéâ AI Data Flow testing completed!")
    print("\nüìã ‡∏™‡∏£‡∏∏‡∏õ:")
    print("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• nodes ‡πÅ‡∏•‡∏∞ edges ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÉ‡∏´‡πâ AI")
    print("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON format")
    print("‚úÖ AI ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")

if __name__ == "__main__":
    main() 